name: Flutter CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Flutter Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Create .env file to avoid warnings
      - name: Create .env file
        run: |
          mkdir -p secrets
          echo "TMB_API=9182d61f6e2362696ccfd187efde4fa7" > secrets/.env
          
      # Cache Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: ~/.flutter
          key: ${{ runner.os }}-flutter-3.35.5

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.5'
          channel: 'stable'
          cache: true

      # Cache pub dependencies
      - name: Cache Pub dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze
        run: flutter analyze

      - name: Run tests with coverage
        run: flutter test --coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: lcov.info
          path: coverage/lcov.info

  coverage_report:
    name: Generate & Publish Coverage Report
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: lcov.info
          path: coverage

      - name: Setup LCOV
        uses: hrishikesh-kadam/setup-lcov@v1

      - name: Generate HTML report & extract stats
        id: coverage
        run: |
          genhtml coverage/lcov.info --output-directory coverage/html > genhtml-summary.txt
          cat genhtml-summary.txt
          # Parse summary for coverage %
          total_lines=$(grep "lines......:" genhtml-summary.txt | awk '{print $2}')
          covered=$(grep "lines......:" genhtml-summary.txt | awk '{print $3}')
          percent=$(grep "lines......:" genhtml-summary.txt | awk '{print $4}')
          echo "total_lines=$total_lines" >> $GITHUB_OUTPUT
          echo "covered=$covered" >> $GITHUB_OUTPUT
          echo "percent=$percent" >> $GITHUB_OUTPUT

      - name: Upload HTML coverage report (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage/html

      - name: Deploy coverage report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: coverage/html
          publish_branch: gh-pages

      # Coverage comment - only for pull requests
      - name: Report code coverage with summary
        if: ${{ github.event_name == 'pull_request' }}
        uses: zgosalvez/github-actions-report-lcov@v4
        with:
          coverage-files: coverage/lcov.info
          minimum-coverage: 90
          artifact-name: code-coverage-report
          github-token: ${{ secrets.GITHUB_TOKEN }}
          update-comment: true
          title-prefix: "ðŸ“Š Code Coverage Report"
          additional-message: |
            âœ… Cobertura generada correctamente

            **Resumen:**
            - LÃ­neas totales: ${{ steps.coverage.outputs.total_lines }}
            - Cubiertas: ${{ steps.coverage.outputs.covered }}
            - Cobertura global: ${{ steps.coverage.outputs.percent }}

            ðŸ”— [Ver reporte HTML completo](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.html)

      # Add coverage summary to workflow for both push and PR (less intrusive than comments)
      - name: Add coverage summary to job
        run: |
          echo "### ðŸ“Š Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "**Resumen:**" >> $GITHUB_STEP_SUMMARY
          echo "- LÃ­neas totales: ${{ steps.coverage.outputs.total_lines }}" >> $GITHUB_STEP_SUMMARY
          echo "- Cubiertas: ${{ steps.coverage.outputs.covered }}" >> $GITHUB_STEP_SUMMARY
          echo "- Cobertura global: ${{ steps.coverage.outputs.percent }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— [Ver reporte HTML completo](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.html)" >> $GITHUB_STEP_SUMMARY